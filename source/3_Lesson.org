#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: The Digital Die
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/8-SC-DigitalDie">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
 
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Inputs and Outputs to generate 1-6
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- GENIE chips can be programmed with several configurations.
- We'll need 1 pin to provide power to the chip and 1 pin to tie it to ground.
- We'll need 1 pin to program the chip.
- We'll need 1 pin to receive an input.
- This leaves us with 4 pins to play with.
- By right clicking on the GENIE chip in Circuit Wizard, we can choose >Program>Program Settings
[[file:img/programChoice.png]]
- Make sure you have a C08 chip sellected.
- Now you can use the check boxes to make different pins inputs or outputs.
- We're going to want to have as many outputs as possible, so this configuration is probably the best.
[[file:img/1in4out.png]]
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- If we want to make a die, we need to be able to represent the numbers 1-6 using LEDs
- But we can't simply connect an LED to each output pin, as we only have 4 output pins to use.
- Build the circuit as shown below.
[[file:img/initialCircuit.png]]
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Here's a circuit that allows any number from 1-6 to be displayed by sending output pins high.
[[file:img/arrangement1.png]]
- Try to come up with your own arrangement, where we could have any number of LEDs fom 1-6, switch on using only 4 outputs.
- Screenshot your circuit when you have finished it.
* A Program for the Die
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- We're going to use the circuit shown below to program our Die.It's identical to the one before it, but the LEDs have been placed differently.
[[file:img/studentCircuit.png]]
- It's a little hard to construct, so you can [[file:doc/StudentCircuit.cwz][download it here]]
- It might help you to understand how the outputs control the LEDs by using the simulation below.
#+BEGIN_HTML
<object data="js/outputs.html" width='400px' height='400px'></object>
#+END_HTML
 
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Use the simulation to write down which outputs will need to be set to /high/ for each number the die will generate from 1 through to 6.
- Using the diagram below and any graphics package you choose, draw a basic diagram to show how the arrangement of LEDs will be connected to the pins of the GENIE chip.
[[file:img/genieChip.png]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- With this information, you should now be able to create a program to generate the random numbers.
- You've quite a bit of experience using flowcharts to program GENIE chips already, so here is the start of the flowchart only.
[[file:img/partialProgram.png]]
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Use the file you downloaded earlier and your knowledge of which outputs to send high to complete the program and test it to make sure it works.
- Take a screenshot of your program when you have finished.
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- There are many ways of solving this probems.
- See if you can come up with an alternative algorithm that doesn't use the =Random= block.
- Take a screenshot of your program when it is complete.
