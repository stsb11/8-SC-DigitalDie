#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: The Digital Die
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-SC-DigitalDie">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
 
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* The problem with Microcontrollers in the real world.
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- You should know that digital data is represented by 1s and 0s.
- We often regard 0 as being *off* and 1 as being *on*.
- So in a simple circuit, we could use a switch to control the digital data. When the switch is closed, current flows and therefore it is on. If the switch is open, no current flows and theefore it is off.
- We can use this knowledge to build a really simple circuit.
** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- We'll use circuit wizard to try and set up a simple digital circuit.
- We want to use a microcontroller (in this case a GENIE C08), to turn an LED on and off.
- We also want to use a 9V battery to power our circuit.
- Set up a circuit like the one shown below.
[[file:img/basicCiruit.png]]
** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- We'll need a little program to go with our circuit, before we can test it out.
- Create a flowchart like the one shown below.
file:img/basicFlowchart.png
- Now flip back to the circuit diagram and test your circuit to make sure that it works.
file:img/blink.gif
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- So in theory we now have a circuit where we can control an LED using a microcontroller.
- But the real world is not so simple.
- Go to =Project>Simulation= and turn on Explosions.
- Simulate your circuit again and see what happens.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- It turns out that in the real world, GENIE cips don't like such high voltages.
- To make sure we don't destroy our chips, we need to make sure we keep the supplied voltage below 6V. 5V is always a safe bet.
** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- Getting 5V from batteries isn't easy. We could use 3 x 1.5V AA batteries to give us 4.5V, and that would probably work, but that would cost us more money.
- Instead we'll use a component called a =Voltage Regulator= to reduce the voltage we supply to the GENIE chip.
- You can find the Voltage Regulator component in the Power Supplies menu on Circuit Wizard. It defaults to the 7805, which is the one we want to use.
file:img/7805.png
** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- You can now run your simulation again and /everything is awesome.../
file:img/blink2.gif
- Or is it?
- Although the circuit may appear to work in Circuit Wizard, in the real world this circuit would be very tempremental, and may not work at all.
- Look at the breadboard below, showing the set up of the circuit.
[[file:img/faulty.png]]
- At first it looks okay, but notice the that LED is illuminated. This means that the output pin on the GENIE chip is high, even when the switch hasn't been closed.
- Now look at the video below, and you'll see that /everything is not quite so awesome.../
[[file:img/faulty.gif]]
- Whether the switch is open or closed, the LED stays illuminated.
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Write up your findings so far. Make sure you can answer the following questions, and use screen shots of your own circuit to help your explanation.
  1. What is digital data?
  2. Why can't we use 9V with a GENIE chip?
  3. What does a Voltage Regulator do?
* Pull Down Resistors
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Whenever an electrical engineer has a bug in her circuit, she'll grab her multimeter to see what's going on.
- You can find a =digital multimeter= in the Virtual Instruments menu.
- We'll place one of the probes on the digital input and the other probe on the ground rail.
file:img/multimeter.png
- Simulate your circuit again and note down the voltage readings when the switch is open and closed.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Hopefully you can see that even when the switch is open, there is a Potential Difference between the input pin and the 0V rail.
- Microcontrollers in reality treat voltage ranges as being eqivalent to a 0 or a 1.
- For a pin to be considered high, the voltage between the pin and ground should be 0.8 x the supply voltage.
  - For this circuit that means the GENIE chip will read a pin as high (1) when the potential difference is above 0.8 x 5V = 4V
- For a pin to be considered low, the voltage between the pin and ground should be 0.2 x the supply voltage.
  - For this circuit that means the GENIE chip will read a pin as low (0) when the potential difference is below 0.2 x 5V = 1V
- As you can see from your readings, the voltage isn't clearly above 4V or below 1V. This means the microcontroller doesn't know if the pin is high or low. We describe this as being a floating pin, and it can cause all kinds of unpredictable behaviour.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Luckily there is a solution. Place a 10kΩ resistor between the pin and the ground rail, as shown below.
[[file:img/100kpullDown.png]]
- Now you'll see that the input voltage when the switch is close is very low (the reading should have changed to mV which means 1000ths of a Volt.)
- This type of resistor is called a pull down resistor and ensures that the GENIE chip reads a logical 0 when the swithch is open and a logical 1 when the switch is closed.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Let's see if the 10kΩ resistor helps us on our real circuit.
[[file:img/pullDown.gif]]
- Once again /everything is awesome.../
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Write up your findings so far. Make sure you can answer the following questions, and use screen shots of your circuit to help your explanation.
  - What voltages are required to give a logical 0 or 1 on an input pin for a GENIE chip?
  - What is meant by a floating pin?
  - How does a pull down resistor prevent a pin from floating?
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- You can use a virtual breadboard to build the circuit shown in the videos above, and test out what happens when you add a pull down resistor yourself.
- Here is a diagram that can help you to build the board without a pulldown resistor
[[file:img/breadboard.png]]
- Build the virtual breadboard above and design a flowchart program that will make the LED flash when the switch is pressed.
- Think where the pulldown resistor would go and then add it to the circuit.
- Test it out again.
- Once you have designed the circuit, take a screenshot of the breadboard without the pull-down resistor, with an explanation of how the circuit worked.
- Now take another screentshot with the pull-down resistor in the circuit, with an explanation of how it worked.
